{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/GitHub/my-portfolio/src/component/Contact.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./Contact.css\";\nimport { useForm } from 'react-hook-form';\nimport emailjs from 'emailjs-com';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Contact = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm(); // Function that displays a success toast on bottom right of the page when form submission is successful\n\n  const toastifySuccess = () => {\n    toast('Form sent!', {\n      position: 'bottom-right',\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: false,\n      className: 'submit-feedback success',\n      toastId: 'notifyToast'\n    });\n  }; // Function called on submit that uses emailjs to send email of valid contact form\n\n\n  const onSubmit = async data => {\n    // Destrcture data object\n    const {\n      name,\n      email,\n      subject,\n      message\n    } = data;\n\n    try {\n      const templateParams = {\n        name,\n        email,\n        subject,\n        message\n      };\n      console.log(process.env.REACT_APP_SERVICE_ID);\n      await emailjs.send(process.env.REACT_APP_SERVICE_ID, process.env.REACT_APP_TEMPLATE_ID, templateParams, process.env.REACT_APP_USER_ID);\n      reset();\n      toastifySuccess();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"contact\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ContactForm\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"contact-form\",\n          onSubmit: handleSubmit(onSubmit),\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              ...register('name', {\n                required: {\n                  value: true,\n                  message: 'Please enter your name'\n                },\n                maxLength: {\n                  value: 30,\n                  message: 'Please use 30 characters or less'\n                }\n              }),\n              className: \"form-control formInput\",\n              placeholder: \"Name\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this), errors.name && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"errorMessage\",\n              children: errors.name.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              name: \"email\",\n              ...register('email', {\n                required: true,\n                pattern: /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n              }),\n              className: \"form-control formInput\",\n              placeholder: \"Email address\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"errorMessage\",\n              children: \"Please enter a valid email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"subject\",\n              ...register('subject', {\n                required: {\n                  value: true,\n                  message: 'Please enter a subject'\n                },\n                maxLength: {\n                  value: 75,\n                  message: 'Subject cannot exceed 75 characters'\n                }\n              }),\n              className: \"form-control formInput\",\n              placeholder: \"Subject\",\n              autoComplete: \"off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this), errors.subject && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"errorMessage\",\n              children: errors.subject.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              rows: 3,\n              name: \"message\",\n              ...register('message', {\n                required: true\n              }),\n              className: \"form-control formInput\",\n              placeholder: \"Message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this), errors.message && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"errorMessage\",\n              children: \"Please enter a message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-btn\",\n            type: \"submit\",\n            children: \"SUBMIT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Contact, \"F372SiVXYlwlPcTvXEYo94zLupw=\", false, function () {\n  return [useForm];\n});\n\n_c = Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/my-portfolio/src/component/Contact.js"],"names":["React","useForm","emailjs","ToastContainer","toast","Contact","register","handleSubmit","reset","formState","errors","toastifySuccess","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","toastId","onSubmit","data","name","email","subject","message","templateParams","console","log","process","env","REACT_APP_SERVICE_ID","send","REACT_APP_TEMPLATE_ID","REACT_APP_USER_ID","e","required","value","maxLength","pattern"],"mappings":"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","sourcesContent":["import React from 'react'\nimport \"./Contact.css\"\nimport { useForm } from 'react-hook-form';\nimport emailjs from 'emailjs-com';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nexport const Contact = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm();\n  \n  // Function that displays a success toast on bottom right of the page when form submission is successful\n  const toastifySuccess = () => {\n    toast('Form sent!', {\n      position: 'bottom-right',\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: false,\n      className: 'submit-feedback success',\n      toastId: 'notifyToast'\n    });\n  };\n  \n  // Function called on submit that uses emailjs to send email of valid contact form\n  const onSubmit = async (data) => {\n    // Destrcture data object\n    const { name, email, subject, message } = data;\n    try {\n      const templateParams = {\n        name,\n        email,\n        subject,\n        message\n      };\n\n      console.log(process.env.REACT_APP_SERVICE_ID)\n\n      await emailjs.send(\n        process.env.REACT_APP_SERVICE_ID,\n        process.env.REACT_APP_TEMPLATE_ID,\n        templateParams,\n        process.env.REACT_APP_USER_ID\n      );\n\n      reset();\n      toastifySuccess();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <div id=\"contact\">\n      <h1>\n        Contact \n      </h1>\n\n      <div className='ContactForm'>\n        <div>\n              <form id='contact-form' onSubmit={handleSubmit(onSubmit)} noValidate>\n                <div className='row-input'>\n                  <input\n                        type='text'\n                        name='name'\n                        {...register('name', {\n                          required: { value: true, message: 'Please enter your name' },\n                          maxLength: {\n                            value: 30,\n                            message: 'Please use 30 characters or less'\n                          }\n                        })}\n                        className='form-control formInput'\n                        placeholder='Name'\n                      autoComplete='off'\n                      ></input>\n                      {errors.name && <span className='errorMessage'>{errors.name.message}</span>}\n                </div>\n\n                <div className='row-input'>\n                  <input\n                        type='email'\n                        name='email'\n                        {...register('email', {\n                          required: true,\n                          pattern: /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n                        })}\n                        className='form-control formInput'\n                        placeholder='Email address'\n                      autoComplete='off'\n                      ></input>\n                      {errors.email && (\n                        <span className='errorMessage'>Please enter a valid email address</span>\n                      )}\n                </div>\n\n                <div className='row-input'>\n                  <input\n                      type='text'\n                      name='subject'\n                      {...register('subject', {\n                        required: { value: true, message: 'Please enter a subject' },\n                        maxLength: {\n                          value: 75,\n                          message: 'Subject cannot exceed 75 characters'\n                        }\n                      })}\n                      className='form-control formInput'\n                      placeholder='Subject'\n                      autoComplete='off'\n                    ></input>\n                    {errors.subject && (\n                      <span className='errorMessage'>{errors.subject.message}</span>\n                    )}\n                </div>\n\n                <div className='row-input'>\n                  <textarea\n                        rows={3}\n                        name='message'\n                        {...register('message', {\n                          required: true\n                        })}\n                        className='form-control formInput'\n                        placeholder='Message'\n                      ></textarea>\n                      {errors.message && <span className='errorMessage'>Please enter a message</span>}\n                </div>\n\n                <button className='submit-btn' type='submit'>\n                  SUBMIT\n                </button>\n              </form>\n              <ToastContainer />\n        </div>\n    </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}